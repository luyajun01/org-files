"6ffb71d28d3a9a309dd2af3690ea556ef699bbbc"
#s(undo-tree [nil ([nil (#43=[nil nil ((#(" " 0 1 (fontified t wrap-prefix #(" " 0 1 (fontified t)) :pm-span (nil 1 32 #41=#s(#39=#s(eieio--class pm-host-chunkmode #40="This chunkmode doesn't know how to compute spans and takes
over all the other space not claimed by other chunkmodes in the
buffer." (#12=#s(eieio--class pm-chunkmode #13="Generic chunkmode object.
Please note that by default :protect-xyz slots are nil in
hostmodes and t in innermodes." (#5=#s(eieio--class pm-root #7="Root polymode class." (#2=#s(eieio--class eieio-instance-inheritor #3="This special class can enable instance inheritance.
Use `clone' to make a new object that does instance inheritance from
a parent instance.  When a slot in the child is referenced, and has
not been set, use values from the parent." nil [#s(cl-slot-descriptor parent-instance unbound eieio-instance-inheritor ((:documentation . #4="The parent of this instance.
If a slot of this class is referenced, and is unbound, then the parent
is checked for a value.")))] #s(hash-table size 65 test eq rehash-size 1.5 rehash-threshold 0.8125 data (parent-instance 0)) (pm-root) ((:parent-instance . parent-instance)) #1=[] #1# #s(#2# unbound) (:custom-groups nil :documentation #3# :abstract t))) [#s(cl-slot-descriptor parent-instance unbound eieio-instance-inheritor ((:documentation . #4#))) #s(cl-slot-descriptor name #6="UNNAMED" string ((:documentation . #8="Name of the object used to for display and info.") (:custom . string) (:group . #9=(default)))) #s(cl-slot-descriptor -props #10=(quote nil) list ((:documentation . #11="[Internal] Plist used to store various extra metadata such as user history.
Use `pm--prop-get' and `pm--prop-put' to place key value pairs
into this list.")))] #s(hash-table size 65 test eq rehash-size 1.5 rehash-threshold 0.8125 data (parent-instance 0 name 1 -props 2)) (pm-weaver pm-exporter pm-chunkmode pm-polymode) ((:parent-instance . parent-instance) (:name . name)) #1# #1# #s(#5# unbound #6# nil) (:custom-groups (default) :documentation #7#))) [#s(cl-slot-descriptor parent-instance unbound eieio-instance-inheritor ((:documentation . #4#))) #s(cl-slot-descriptor name #6# string ((:documentation . #8#) (:custom . string) (:group . #9#))) #s(cl-slot-descriptor -props #10# list ((:documentation . #11#))) #s(cl-slot-descriptor mode nil symbol ((:documentation . #14="Emacs major mode for the chunk's body.
If :mode slot is nil (anonymous chunkmodes), use the value of
`polymode-default-inner-mode' is when set, or use the value of
the slot :fallback-mode. A special value 'host means to use the
host mode (useful auto-chunkmodes only).") (:custom . symbol) (:group . #9#))) #s(cl-slot-descriptor fallback-mode #15=(quote poly-fallback-mode) symbol ((:documentation . #16="Mode to use when mode lookup fails for various reasons. Can
    take a special value 'host. Note that, when set,
    `polymode-default-inner-mode' takes precedence over this
    value.") (:custom . symbol) (:group . #9#))) #s(cl-slot-descriptor allow-nested t symbol ((:documentation . #17="Non-nil if other inner-modes are allowed to nest within this
inner-mode.") (:custom . symbol) (:group . #9#))) #s(cl-slot-descriptor indent-offset 2 #18=(or number symbol) ((:documentation . #19="Indentation offset for this mode.
Currently this is only used in +indent and -indent cookies which
when placed on a line cause manual shift in indentation with
respect to how polymode would normally indent a line. Should be
used in cases when indentation of the line is incorrect. Can be a
number, a variable name or a function name to be called with no
arguments.") (:custom . #20=(choice number symbol)) (:group . #9#))) #s(cl-slot-descriptor pre-indent-offset 0 #21=(or number function) ((:documentation . #22="Function to compute the offset first line of this chunk.
Offset is relative to how the host mode would indent it. Called
with no-arguments with the point at the begging of the chunk.") (:custom . #23=(choice number function)) (:group . #9#))) #s(cl-slot-descriptor post-indent-offset 0 #24=(or number function) ((:documentation . #25="Function to compute the offset of the following line after this chunk.
Offset is relative to how the host mode would indent it. Called
without arguments with point at the end of the chunk but before
the trailing white spaces if any.") (:custom . #26=(choice number function)) (:group . #9#))) #s(cl-slot-descriptor protect-indent nil boolean ((:documentation . #27="Whether to narrowing to current span before indent.") (:custom . boolean) (:group . #9#))) #s(cl-slot-descriptor protect-font-lock nil boolean ((:documentation . #28="Whether to narrow to span during font lock.") (:custom . boolean) (:group . #9#))) #s(cl-slot-descriptor protect-syntax nil boolean ((:documentation . #29="Whether to narrow to span when calling `syntax-propertize-function'.") (:custom . boolean) (:group . #9#))) #s(cl-slot-descriptor adjust-face nil #30=(or number face list) ((:documentation . #31="Fontification adjustment for the body of the chunk.
It should be either, nil, number, face or a list of text
properties as in `put-text-property' specification. If nil or 0
no highlighting occurs. If a face, use that face. If a number, it
is a percentage by which to lighten/darken the default chunk
background. If positive - lighten the background on dark themes
and darken on light thems. If negative - darken in dark thems and
lighten in light thems.") (:custom . #32=(choice number face sexp)) (:group . #9#))) #s(cl-slot-descriptor init-functions #33=(quote nil) list ((:documentation . #34="List of functions called after the initialization.
Functions are called with one argument TYPE in the buffer
associated with this chunkmode's span. TYPE is either 'host,
'head, 'body or 'tail. All init-functions in the inheritance
chain are called in parent-first order. Either customize this
slot or use `object-add-to-list' function.") (:custom . hook) (:group . #9#))) #s(cl-slot-descriptor switch-buffer-functions #35=(quote nil) list ((:documentation . #36="List of functions to run at polymode buffer switch.
Each function is run with two arguments, OLD-BUFFER and
NEW-BUFFER. In contrast to identically named slot in
`pm-polymode' class, these functions are run only when NEW-BUFFER
is of this chunkmode.") (:custom . hook) (:group . #9#))) #s(cl-slot-descriptor keep-in-mode nil symbol ((:documentation . #37="Major mode to keep in when polymode switches implementation buffers.
When a special symbol 'host, keep in hostmode. The buffer with
this major mode must be installed by one of the innermodes or the
hostmode. If multiple innermodes installed buffers of this mode,
the first buffer is used.") (:custom . symbol) (:group . #9#))) #s(cl-slot-descriptor -buffer nil #38=(or null buffer) nil)] #s(hash-table size 65 test eq rehash-size 1.5 rehash-threshold 0.8125 data (parent-instance 0 name 1 -props 2 mode 3 fallback-mode 4 allow-nested 5 indent-offset 6 pre-indent-offset 7 post-indent-offset 8 protect-indent 9 protect-font-lock 10 protect-syntax 11 adjust-face 12 init-functions 13 switch-buffer-functions 14 keep-in-mode 15 -buffer 16)) (pm-inner-chunkmode pm-host-chunkmode) ((:parent-instance . parent-instance) (:name . name) (:mode . mode) (:fallback-mode . fallback-mode) (:allow-nested . allow-nested) (:indent-offset . indent-offset) (:pre-indent-offset . pre-indent-offset) (:post-indent-offset . post-indent-offset) (:protect-indent . protect-indent) (:protect-font-lock . protect-font-lock) (:protect-syntax . protect-syntax) (:adjust-face . adjust-face) (:init-functions . init-functions) (:switch-buffer-functions . switch-buffer-functions) (:keep-in-mode . keep-in-mode)) #1# #1# #s(#12# unbound #6# nil nil poly-fallback-mode t 2 0 0 nil nil nil nil nil nil nil nil) (:custom-groups (default) :documentation #13#))) [#s(cl-slot-descriptor parent-instance unbound eieio-instance-inheritor ((:documentation . #4#))) #s(cl-slot-descriptor name #6# string ((:documentation . #8#) (:custom . string) (:group . #9#))) #s(cl-slot-descriptor -props #10# list ((:documentation . #11#))) #s(cl-slot-descriptor mode nil symbol ((:documentation . #14#) (:custom . symbol) (:group . #9#))) #s(cl-slot-descriptor fallback-mode #15# symbol ((:documentation . #16#) (:custom . symbol) (:group . #9#))) #s(cl-slot-descriptor allow-nested (quote always) symbol ((:documentation . #17#) (:custom . symbol) (:group . #9#))) #s(cl-slot-descriptor indent-offset 2 #18# ((:documentation . #19#) (:custom . #20#) (:group . #9#))) #s(cl-slot-descriptor pre-indent-offset 0 #21# ((:documentation . #22#) (:custom . #23#) (:group . #9#))) #s(cl-slot-descriptor post-indent-offset 0 #24# ((:documentation . #25#) (:custom . #26#) (:group . #9#))) #s(cl-slot-descriptor protect-indent nil boolean ((:documentation . #27#) (:custom . boolean) (:group . #9#))) #s(cl-slot-descriptor protect-font-lock nil boolean ((:documentation . #28#) (:custom . boolean) (:group . #9#))) #s(cl-slot-descriptor protect-syntax nil boolean ((:documentation . #29#) (:custom . boolean) (:group . #9#))) #s(cl-slot-descriptor adjust-face nil #30# ((:documentation . #31#) (:custom . #32#) (:group . #9#))) #s(cl-slot-descriptor init-functions #33# list ((:documentation . #34#) (:custom . hook) (:group . #9#))) #s(cl-slot-descriptor switch-buffer-functions #35# list ((:documentation . #36#) (:custom . hook) (:group . #9#))) #s(cl-slot-descriptor keep-in-mode nil symbol ((:documentation . #37#) (:custom . symbol) (:group . #9#))) #s(cl-slot-descriptor -buffer nil #38# nil)] #s(hash-table size 65 test eq rehash-size 1.5 rehash-threshold 0.8125 data (parent-instance 0 name 1 -props 2 mode 3 fallback-mode 4 allow-nested 5 indent-offset 6 pre-indent-offset 7 post-indent-offset 8 protect-indent 9 protect-font-lock 10 protect-syntax 11 adjust-face 12 init-functions 13 switch-buffer-functions 14 keep-in-mode 15 -buffer 16)) nil ((:parent-instance . parent-instance) (:name . name) (:mode . mode) (:fallback-mode . fallback-mode) (:allow-nested . allow-nested) (:indent-offset . indent-offset) (:pre-indent-offset . pre-indent-offset) (:post-indent-offset . post-indent-offset) (:protect-indent . protect-indent) (:protect-font-lock . protect-font-lock) (:protect-syntax . protect-syntax) (:adjust-face . adjust-face) (:init-functions . init-functions) (:switch-buffer-functions . switch-buffer-functions) (:keep-in-mode . keep-in-mode)) #1# #1# #s(#39# unbound #6# nil nil poly-fallback-mode always 2 0 0 nil nil nil nil nil nil nil nil) (:custom-groups (default) :documentation #40#)) #s(#39# unbound "org" nil org-mode poly-fallback-mode always 2 0 0 nil nil nil nil nil nil nil nil) "org:" unbound unbound unbound unbound unbound unbound unbound unbound unbound unbound unbound unbound unbound unbound #<buffer R_WIKI.org>)) :pm-mode org-mode :pm-span-old #42=(nil 1 33 #41#))) . 1) (undo-tree-id166 . 1) (undo-tree-id167 . 1) (undo-tree-id168 . 1) (undo-tree-id169 . 1) (undo-tree-id170 . 1) (undo-tree-id171 . 1) (undo-tree-id172 . 1) (undo-tree-id173 . 1) (undo-tree-id174 . 1) (undo-tree-id175 . 1) (undo-tree-id176 . 1) (undo-tree-id177 . 1) (undo-tree-id178 . 1) (undo-tree-id179 . 1) (undo-tree-id180 . 1) (undo-tree-id181 . 1) (undo-tree-id182 . 1) (undo-tree-id183 . 1) (undo-tree-id184 . 1) (undo-tree-id185 . 1) (undo-tree-id186 . 1) (undo-tree-id187 . 1) (undo-tree-id188 . 1) (undo-tree-id189 . 1) (undo-tree-id190 . 1) (undo-tree-id191 . 1) (undo-tree-id192 . 1) (undo-tree-id193 . 1) (undo-tree-id194 . 1) (undo-tree-id195 . 1) (undo-tree-id196 . 1) (undo-tree-id197 . 1) (undo-tree-id198 . 1) (undo-tree-id199 . 1) (undo-tree-id200 . 1) (undo-tree-id201 . 1) (undo-tree-id202 . 1) (undo-tree-id203 . 1) (undo-tree-id204 . 1) (undo-tree-id205 . 1) (undo-tree-id206 . 1) (undo-tree-id207 . 1) (undo-tree-id208 . 1) (undo-tree-id209 . 1) (undo-tree-id210 . 1) (undo-tree-id211 . 1) (undo-tree-id212 . 1) (undo-tree-id213 . 1) (undo-tree-id214 . 1) (undo-tree-id215 . 1) (undo-tree-id216 . 1) (undo-tree-id217 . 1) (undo-tree-id218 . 1) (undo-tree-id219 . 1) (undo-tree-id220 . 1) (undo-tree-id221 . 1) (undo-tree-id222 . 1) (undo-tree-id223 . 1) (undo-tree-id224 . 1) (undo-tree-id225 . 1) (undo-tree-id226 . 1) (undo-tree-id227 . 1) (undo-tree-id228 . 1) (undo-tree-id229 . 1) (undo-tree-id230 . 1) (undo-tree-id231 . 1) (undo-tree-id232 . 1) (undo-tree-id233 . 1) (undo-tree-id234 . 1) (undo-tree-id235 . 1) (undo-tree-id236 . 1) (undo-tree-id237 . 1) (undo-tree-id238 . 1) (undo-tree-id239 . 1) (undo-tree-id240 . 1) (undo-tree-id241 . 1) (undo-tree-id242 . 1) (undo-tree-id243 . 1) (undo-tree-id244 . 1) (undo-tree-id245 . 1) (undo-tree-id246 . 1) (undo-tree-id247 . 1) (undo-tree-id248 . 1) (undo-tree-id249 . 1) (undo-tree-id250 . 1) (undo-tree-id251 . 1) (undo-tree-id252 . 1) (undo-tree-id253 . 1) (undo-tree-id254 . 1) (undo-tree-id255 . 1) (undo-tree-id256 . 1) (undo-tree-id257 . 1) (undo-tree-id258 . 1) (undo-tree-id259 . 1) (undo-tree-id260 . 1) (undo-tree-id261 . 1) (undo-tree-id262 . 1) (undo-tree-id263 . 1) (undo-tree-id264 . 1) (undo-tree-id265 . 1) (undo-tree-id266 . 1) (undo-tree-id267 . 1) (undo-tree-id268 . 1) (undo-tree-id269 . 1) (undo-tree-id270 . 1) (undo-tree-id271 . 1) (undo-tree-id272 . 1) (undo-tree-id273 . 1) (undo-tree-id274 . 1)) ((1 . 2)) (24328 62755 60345 0) 0 nil]) ((#("
" 0 1 (fontified t wrap-prefix "   " :pm-span #42# :pm-mode org-mode)) . 3) (undo-tree-id126 . 1) (undo-tree-id127 . 1) (undo-tree-id128 . 1) (undo-tree-id129 . 1) (undo-tree-id130 . 1) (undo-tree-id131 . 1) (undo-tree-id132 . 1) (undo-tree-id133 . 1) (undo-tree-id134 . 1) (undo-tree-id135 . 1) (undo-tree-id136 . 1) (undo-tree-id137 . 1) (undo-tree-id138 . 1) (undo-tree-id139 . 1) (undo-tree-id140 . 1) (undo-tree-id141 . 1) (undo-tree-id142 . 1) (undo-tree-id143 . 1) (undo-tree-id144 . 1) (undo-tree-id145 . 1) (undo-tree-id146 . 1) (undo-tree-id147 . 1) (undo-tree-id148 . 1) (undo-tree-id149 . 1) (undo-tree-id150 . -1) (undo-tree-id151 . 1) (undo-tree-id152 . 1) (undo-tree-id153 . 1) (undo-tree-id154 . 1) (undo-tree-id155 . 1) (undo-tree-id156 . 1) (undo-tree-id157 . 1) (undo-tree-id158 . 1) (undo-tree-id159 . 1) (undo-tree-id160 . 1) (undo-tree-id161 . 1) (undo-tree-id162 . 1) (undo-tree-id163 . 1) (undo-tree-id164 . 1) (undo-tree-id165 . 1)) ((3 . 4)) (24328 62754 430264 0) 0 nil]) nil nil (24328 62356 134126 0) 0 nil] #43# 1226 2 nil)