* emacs wiki                                                            :toc:
  - [[#实用技能][实用技能]]
    - [[#不重新启动-emacs让emacs-配置生效][不重新启动 emacs,让.emacs 配置生效]]
  - [[#常用快捷键][常用快捷键]]
  - [[#emacs-mode][emacs mode]]
  - [[#markdown-mode][markdown mode]]
  - [[#ivy][ivy]]
  - [[#lpy][lpy]]
  - [[#avy][avy]]
  - [[#counsel][counsel]]
    - [[#counsel-rg][counsel-rg]]
    - [[#counsel-etags-grep][counsel-etags-grep]]
    - [[#counsel-descbind][counsel-descbind]]
      - [[#counsel-swith-buffer][counsel-swith-buffer]]
    - [[#counsel-etags-grep-1][counsel-etags-grep]]
    - [[#counsel-packages][counsel-packages]]
    - [[#counsel-imenu][counsel-imenu]]
    - [[#counsel-google][counsel-google]]
  - [[#swiper][swiper]]
      - [[#swiper-all-thing-at-point][swiper-all-thing-at-point.]]
      - [[#swiper-isearch-thing-at-point][swiper-isearch-thing-at-point.]]
      - [[#swiper-thing-at-point][swiper-thing-at-point.]]
  - [[#helm][helm]]
  - [[#evil][evil]]
  - [[#org][org]]
    - [[#配置][配置]]
    - [[#evil-org-mode][evil-org-mode]]
    - [[#toc-org][toc-org]]
  - [[#bm][bm]]
  - [[#hydra][hydra]]
  - [[#magit][magit]]
  - [[#shell][shell]]
  - [[#yas-nippet][yas-nippet]]
  - [[#安装各种包遇到的坑][安装各种包遇到的坑]]
    - [[#ess][ess]]

** 实用技能
*** 不重新启动 emacs,让.emacs 配置生效
(1) 用 emacs 打开 .emacs 文件，C-x C-e 光标前面的运行一条语句。立即生效。
(2) 选择一个 region , M-x eval-region
(3) M-x load-file ~/.emacs
(4) M-x eval-buffer

** 常用快捷键
   需要注意的是在 emacs shift 的键是 s.
| 功能                                              | 快捷键                 |
|---------------------------------------------------+------------------------|
| 切换 read/write mode                              | c-x c-q                |
| 关闭当前 buffer                                   | c-x k                  |
| 插入 src-block                                    | C-c s i                |
| 编辑 src-block                                    | C-c s e                |
| 新建                                              | C-x C-f                |
| 保存                                              | C-x C-s                |
| 另存为                                            | C-x C-w                |
| 全选                                              | C-x h                  |
| 选取一段                                          | M-h                    |
| 光标下移                                          | C-n                    |
| 光标上移                                          | C-p                    |
| 标记环（用于选择区域）                            | C-@ C-@                |
| 快速选择文本                                      | C-x C-x                |
| (在 C-y 之后使用，粘贴剪贴板内以前的项目)yank-pop | M-y                    |
| (选中段落) mark-paragraph                         | M-h                    |
| markdown/org 预览                                 | M-x maple-preview-mode |
| 注释脚本                                          | S-c-l                  |
| 光标从不同的 buffer 间切换                        | C-x o                  |
| helm-recentf                                      | M-m f r                |
| helm-mark-ring                                    |                        |
| 快速选择一行文本                                  | C-c m l                |
| 光标快速跳转到固定的行                            | C-u number             |
| goto-last-change(跳转到上次变化的位置)            | g ;                    |
| ido-find-file                                     | C-x C-f/SPC f f        |
| evil-insert-new-line                              | SPC i j                |
| 括号之间的跳转                                    | % evil-matchit         |
** emacs mode
** markdown mode
| 快捷键                    | 功能               |
| S-TAB (markdown-shifttab) | visibility cycling |
| 加粗                      | c-c c-s b          |
| 斜线                      | c-c c-s i          |
| M-RET h I                 | 插入 header        |
| M-RET h s                 | 插入下级标题       |

** ivy
之前使用 ivy,一直存在 function is void 等问题，原因是.emacs.d/elpy 文件下的有 ivy 的旧包，将之删除，重新安装即可！
| 功能 | vim | emacs |
|------+-----+-------|
| 行首 | ^   | C-a   |
|      |     |       |

** lpy
我是如此的喜欢这个包。
但是这个包在使用过程中，需要注意一些问题。
首先开机使用的时候，应该执行 pyvenv-workon 命令选择虚拟环境，再执行 lpy-mode。
** avy
这个函数可以实现快速跳转！
| 命令          | 快捷键                         |
| avy-move-line | 将目标行快速剪切到到你所在的行 |
| avy-goto-line | 快速跳转到目标行               |
| avy-word      | 实现单词跳转,很实用!           |
|               |                                |

** counsel
| 命令              | 快捷键 |
| counsel-mark-ring | spc-c-m |
*** counsel-rg
这个包可以跨文件搜索 char 关键词。很方便的。
*** counsel-etags-grep
功能类似于 counsel-rg, 也可以进行搜索词汇.
*** counsel-descbind
可以快速了解当前可以还绑定哪些快捷键.


**** counsel-swith-buffer

*** counsel-etags-grep
功能类似于这个包可以跨文件搜索 char 关键词。很方便的
*** counsel-packages
可以方便地删除你安装的 packgage.
*** counsel-imenu
可以充当文档目录,快捷键 spc-j-i 
*** counsel-google 
可以方便地 google.

** swiper 
**** swiper-all-thing-at-point.
**** swiper-isearch-thing-at-point.
**** swiper-thing-at-point.

** helm

1、利用 helm-imenu 查看目录结构，比如 markdown 文件的目录结构。

2、利用 helm-mark-ring 可以查看最近的鼠标光标停留的记录（真的太爽了！）。

3、利用 helm-recentf 可以查看最近打开的文件位置。

4、利用 helm-regexp 搜索中文文字，真是太方便了。
** evil
   vim 模式谁用谁知道啊！！！！太爽了！需要学习 vim 的按键快捷键。

| 功能 | 快捷键 |
|------+--------|
| p    | 粘贴   |
| d    | 剪切   |
| y    | 复制   |
|      |        |  

以行/列为单位移动，h,j,k,l
y =i

visual mode

| 功能   | 快捷键                                                                           |
| x      | 删除                                                                             |
| dd     | 删除当前光标所在行                                                               |
| ndd    | 删除光标所在位置向下 n 行                                                        |
| G      | 移动到这个文件的最后一行                                                         |
| nG     | 移动到这个文件的第 n 行                                                          |
| gg     | 移动到这个文件的第一行                                                           |
| 0      | 移动到光标所在行开始处                                                           |
| $      | 移动到光标所在行的最后一个位置                                                   |
| yy     | 复制光标所在的一行                                                               |
| nyy    | 复制第 n 行                                                                      |
| p      | 光标的下一行开始复制                                                             |
| P      | 光标的上一行开始复制                                                             |
| u      | 复原                                                                             |
| :w     | 保存                                                                             |
| :w!    | 强制保存                                                                         |
| :q     | 离开                                                                             |
| :q!    | 强制离开不保存                                                                   |
| Ctrl+f | 屏幕向下移动一页                                                                 |
|        |                                                                                  |
| Ctrl+b | 屏幕向上移动一页                                                                 |
| o      | 进入插入模式后，是插入新的一行，从行首开始输入文字                               |
| a      | 进入插入模式后，是从目前光标所在位置的下一个位置开始输入文字                     |
| i      | 切换进入插入模式「insert mode」，按“i”进入插入模式后是从光标当前位置开始输入文件 |
| u      | 复原或者称为返回上一个操作                                                       |
| [ b    | previous buffer                                                                  |
| ] b    | next buffer                                                                      |

visual mode

编辑过程中，常用的操作无非为删除，复制，粘贴，翻页，复原
复原
重复上一操作
ctrl + r

** org
喜欢打开 org-indent-mode.这样可以同样 level 下标题能够缩进。

*** 配置
    #+begin_src lisp
      (require 'org-tempo) ;<s能够补全代码块 or org-structure-template-alist C-c C-, 
    #+end_src

 | 功能                                                 | 快捷键                     |
 |------------------------------------------------------+----------------------------|
 | 把当前位置压入 mark ring 中,以方便以后方便跳回该位置 | C-c % (org-mark-ring-push) |
 | org-structure-template-alist                         | C-c C-,                    |
 | 插入 org 脚注                                        | M-ret f r                  |
 | org-cdlatex 插入环境 template                        | C-c {                      |
 | org-toggle-latex-fragment(将 latex 公式转换为图片)   | C-c C-x C-l                |
 | org-table-insert-column                              |                            |
 | org-table-insert-row                                 |                            |

*** evil-org-mode
| 功能  | 快捷键                          |
|-------+---------------------------------|
| gh    | outline-up-heading              |
| gj    | org-forward-heading-same-level  |
| gk    | org-backward-heading-same-level |
| gl    | outline-next-visible-heading    |
| t     | org-todo                        |
| T     | org-insert-todo-heading         |
| H     | org-shiftleft                   |
| J     | org-shiftright                  |
| K     | org-shiftup                     |
| L     | org-shiftdown                   |
| o     | always-insert-item              |
| O     | org-insert-heading              |
| ’$’ | org-end-of-line                 |
| ’^’ | org-beginning-of-line           |
|       |                                 |


<	org-metaleft
>	org-metaright
<leader>a	org-agenda
<leader>t	org-show-todo-tree
<leader>c	org-archive-subtree
<leader>l	evil-org-open-links
<leader>o	evil-org-recompute-clocks

*** toc-org
org-set-tags-command(c-c c-q) 放在第一个标题后面输入这个命令,即可生成 toc.
** bm
bm-book-line 可以设置 bookmark 用于快速跳转
bm-remove-all-buffers 可以删除所有标记的 bookmark,真的很方便！
** hydra
hydra-goto-line 用于快速跳转到固定的行，以及标记 mark,真的是很方便。
** magit
参考连接:https://www.jianshu.com/p/990e69407b44
文件管理神器 magit. 

傻瓜流程:

magit-status| s |c-c|pp

需求:

1.修改本地仓储.(本地操作,magit-status)

2.stage 这些修改 (s)

3.提交修改.(创建 commit，然后 c-c)

4.push 到远端 github （p-p）

Git 工作流程

代码仓库的管理，即管理四棵“Tree”，远程仓库(remote repository)、本地仓库(HEAD/local repository)、缓冲区(INDEX/stage)、本地目录(Local directory)。

严格来说，管理的三棵树：仓库、缓冲区、本地目录；使用频繁的基本操作：

检出仓库：git clone <server:/repository>

跟踪文件：git add <filename>，添加至缓存区

取消跟踪文件：git rm --cached <filename>

提交：git commit -m "代码提交信息"，提交到本地仓库(Local repository)

删除文件：git rm <filename>，取消 HEAD 的提交，并将本地文件置为“Stage：delete”状态

检出文件：git checkout <filename>，使用最新的提交覆盖目标文件

rollback：git reset --soft <commit>，保持当前文件修改的状态，版本 rollback 至 commit 版本

                git reset --hard <commit>, 版本 rollback 至 commit 版本

新建/切换分支：git branch <branch_name>

删除分支：git branch -d <branch_name>

检出(远程)分支：git checkout -b <(origin/)branch_name>

推送分支：git push origin <branch_name>，推送至远程仓库

设置推送的目标远程仓库：git remote add origin <server>，在推送分支前，需先配置

同步代码：git pull，本地仓库更新到远程仓库的最新提交

合并分支至当前分支：git merge <branch_name>

丢弃本地改动及提交，同步最新远程仓库版本：git reset --hard <origin/branch_name> 或 git fetch orgin

** shell
在 spacemacs 中，有专门的 shell layer，但是目前还不是很熟悉，可以先用 eshell 代替，后面再做研究。
| 功能  | 快捷键     |
|-------+------------|
| shell | M-x eshell |
| shell | M-X shell  |
|       |            |
** yas-nippet

要使用某个 snippet 很简单,只需要输入缩写然后按下 M-/ or tab 就行了. 

| 功能              | 快捷键                      |
| yas-expand        | M-/                         |
| yas-insert-sippet | M-x yas-insert-sippet       |
| 查看 Yasnippet       | helm-yas-visit-snippet-file |

参考文献：
https://github.com/lujun9972/emacs-document/blob/master/emacs-common/在Spacemacs中为Yasnippet添加自定义snippet.org

** 安装各种包遇到的坑
*** ess
这个包遇到的坑何其多，所以记录详细配置过程。

#+BEGIN_SRC lisp
  (ess :variables
       ess-assign-key "\M--"
       ;;windows版本需要加以下语法，mac不需要
       inferior-R-program-name "F:\\LJ\\R-3.6.1\\bin\\x64\\Rterm.exe")
#+END_SRC

ess 环境配置比较麻烦，主要要确认系统默认的 R version，这涉及到环境变量的配置。在 mac 中，环境变量主要在~/.bashrc 和~/.bash_profile 两个文件中。

#+BEGIN_SRC R
  .libPaths()
  Sys.getenv()
  sessionInfo()
  #+END_SRC

  
