* emacs wiki                                                            :toc:
  - [[#实用技能][实用技能]]
    - [[#不重新启动-emacs让emacs-配置生效][不重新启动 emacs,让.emacs 配置生效]]
    - [[#key-map][key map]]
  - [[#推荐安装包][推荐安装包]]
  - [[#常用快捷键][常用快捷键]]
  - [[#spacemacs][spacemacs]]
  - [[#emacs-mode][emacs mode]]
  - [[#company][company]]
    - [[#company-diag][company-diag]]
  - [[#markdown-mode][markdown mode]]
  - [[#ivy][ivy]]
  - [[#lpy][lpy]]
  - [[#avy][avy]]
  - [[#counsel][counsel]]
    - [[#counsel-rg][counsel-rg]]
    - [[#counsel-etags-grep][counsel-etags-grep]]
    - [[#counsel-descbind][counsel-descbind]]
    - [[#counsel-mark-ring][counsel-mark-ring]]
    - [[#counsel-swith-buffer][counsel-swith-buffer]]
    - [[#counsel-etags-grep-1][counsel-etags-grep]]
    - [[#counsel-packages][counsel-packages]]
    - [[#counsel-imenu][counsel-imenu]]
    - [[#counsel-google][counsel-google]]
    - [[#counsel-bookmark][counsel-bookmark]]
  - [[#swiper][swiper]]
    - [[#my-swiper-search][my-swiper-search]]
    - [[#swiper-all-thing-at-point][swiper-all-thing-at-point.]]
    - [[#swiper-isearch-thing-at-point][swiper-isearch-thing-at-point.]]
    - [[#swiper-thing-at-point][swiper-thing-at-point.]]
  - [[#helm][helm]]
  - [[#evil][evil]]
    - [[#evil-escape][evil-escape]]
  - [[#lazy-set-key][lazy-set-key]]
  - [[#lispy][lispy]]
  - [[#evil-lispy][evil-lispy]]
  - [[#lispyville][lispyville]]
  - [[#multiple-cursor][multiple-cursor]]
  - [[#treemacs][treemacs]]
  - [[#org][org]]
    - [[#配置][配置]]
    - [[#evil-org-mode][evil-org-mode]]
    - [[#smartparens][smartparens]]
    - [[#olivetti][olivetti]]
    - [[#toc-org][toc-org]]
    - [[#org-agenda][org-agenda]]
    - [[#org-download][org-download]]
  - [[#bm][bm]]
  - [[#hydra][hydra]]
  - [[#shell][shell]]
  - [[#yas-nippet][yas-nippet]]
    - [[#creat-new-yasnippet][creat new yasnippet]]
  - [[#others-packages][others packages]]
    - [[#pyim][pyim]]
      - [[#手动加词和删词][手动加词和删词]]
    - [[#color-rg][color-rg]]
    - [[#awesome-tab][awesome-tab]]
    - [[#pdf-tools][pdf-tools]]
    - [[#python][python]]
  - [[#安装各种包遇到的坑][安装各种包遇到的坑]]
    - [[#ess][ess]]

** 实用技能
*** 不重新启动 emacs,让.emacs 配置生效
(1) 用 emacs 打开 .emacs 文件，C-x C-e 光标前面的运行一条语句。立即生效。
(2) 选择一个 region , M-x eval-region
(3) M-x load-file ~/.emacs
(4) M-x eval-buffer

emacs 配置坑巨多，那么就需要 debug, 需要执行 toggle-debug-on-error.
*** key map
可以方便地将key unset.
(global-unset-key (kbd "M-<down-mouse-1>"))
(global-set-key (kbd "M-<mouse-1>") 'mc/add-cursor-on-click)

** 推荐安装包

evil,evil-escape,org,.

** 常用快捷键
   需要注意的是在 emacs shift 的键是 s.
| 功能                                              | 快捷键                 |
|---------------------------------------------------+------------------------|
| 切换 read/write mode                              | c-x c-q                |
| 关闭当前 buffer                                   | c-x k                  |
| 插入 src-block                                    | C-c s i                |
| 编辑 src-block                                    | C-c s e                |
| 新建                                              | C-x C-f                |
| 保存                                              | C-x C-s                |
| 另存为                                            | C-x C-w                |
| 全选                                              | C-x h                  |
| 选取一段                                          | M-h                    |
| 光标下移                                          | C-n                    |
| 光标上移                                          | C-p                    |
| 标记环（用于选择区域）                            | C-@ C-@                |
| 快速选择文本                                      | C-x C-x                |
| (在 C-y 之后使用，粘贴剪贴板内以前的项目)yank-pop | M-y                    |
| (选中段落) mark-paragraph                         | M-h                    |
| markdown/org 预览                                 | M-x maple-preview-mode |
| 注释脚本                                          | S-c-l                  |
| 光标从不同的 buffer 间切换                        | C-x o                  |
| helm-recentf                                      | M-m f r                |
| helm-mark-ring                                    |                        |
| 快速选择一行文本                                  | C-c m l                |
| 光标快速跳转到固定的行                            | C-u number             |
| goto-last-change(跳转到上次变化的位置)            | g ;                    |
| ido-find-file                                     | C-x C-f/SPC f f        |
| evil-insert-new-line                              | SPC i j                |
| 括号之间的跳转                                    | % evil-matchit         |

在 emacs 中，enter 键对应的 key map 是 c-m.

** spacemacs

在 additional install packages.
#+begin_export lisp
  dotspacemacs-additional-packages
'(
  (nox :location (recipe :fetcher github :repo "manateelazycat/nox"))
  )
#+end_export

** emacs mode
** company
*** company-diag
这个函数可以看出当前 company mode 的配置.
** markdown mode
| 快捷键                    | 功能               |
| S-TAB (markdown-shifttab) | visibility cycling |
| 加粗                      | c-c c-s b          |
| 斜线                      | c-c c-s i          |
| M-RET h I                 | 插入 header        |
| M-RET h s                 | 插入下级标题       |

** ivy
之前使用 ivy,一直存在 function is void 等问题，原因是.emacs.d/elpy 文件下的有 ivy 的旧包，将之删除，重新安装即可！
| 功能 | vim | emacs |
|------+-----+-------|
| 行首 | ^   | C-a   |
|      |     |       |

** lpy
我是如此的喜欢这个包。
但是这个包在使用过程中，需要注意一些问题。
首先开机使用的时候，应该执行 pyvenv-workon 命令选择虚拟环境，再执行 lpy-mode。
** avy
这个函数可以实现快速跳转！
| 命令          | 快捷键                            |
| avy-move-line | 将目标行快速剪切到到你所在的行 |
| avy-goto-line | spc-j-l 快速跳转到目标行               |
| avy-goto-word-1 | spc-w 实现单词跳转,很实用!           |
|               |                                   |

** counsel
项目地址:https://github.com/abo-abo/swiper

| 命令              | 快捷键 |
| counsel-mark-ring | spc-c-m |
*** counsel-rg
    这个包可以跨文件搜索 char 关键词。很方便的。
在 windows 里，download 地址 https://github.com/BurntSushi/ripgrep/releases, 然
后记得把它的文件夹放在 path 里。

*** counsel-etags-grep
功能类似于 counsel-rg, 也可以进行搜索词汇.
*** counsel-descbind
describe-function.可以快速了解当前可以还绑定哪些快捷键.
*** counsel-mark-ring
添加标记,可以实现快速跳转!非常方便!
如何删除 mark-ring?
*** counsel-swith-buffer

*** counsel-etags-grep
功能类似于这个包可以跨文件搜索 char 关键词。很方便的
*** counsel-packages
可以方便地删除你安装的 packgage.
*** counsel-imenu
可以充当文档目录,快捷键 spc-j-i
*** counsel-google
可以方便地 google.
*** counsel-bookmark
还没弄懂!

** swiper
*** my-swiper-search
快速返回上一次搜索结果.好用!
*** swiper-all-thing-at-point.
*** swiper-isearch-thing-at-point.
*** swiper-thing-at-point.

** helm

1、利用 helm-imenu 查看目录结构，比如 markdown 文件的目录结构。

2、利用 helm-mark-ring 可以查看最近的鼠标光标停留的记录（真的太爽了！）。

3、利用 helm-recentf 可以查看最近打开的文件位置。

4、利用 helm-regexp 搜索中文文字，真是太方便了。
** evil
   vim 模式谁用谁知道啊！！！！太爽了！需要学习 vim 的按键快捷键。

| 功能 | 快捷键                       |
|------+------------------------------|
| p    | 粘贴                         |
| d    | 剪切                         |
| y    | 复制                         |
| v    | 快速跳转到 visual state      |
| gU   | 小写变大写                   |
| kj   | 实现 ese 功能（evil-escape） |
| .    | 实现 repeat 功能             |
| e    | 可以实现一行文字间快速跳转   |
|      |                              |



以行/列为单位移动，h,j,k,l
y =i

visual mode

| 功能   | 快捷键                                                                           |
| x      | 删除                                                                             |
| dd     | 删除当前光标所在行                                                               |
| ndd    | 删除光标所在位置向下 n 行                                                        |
| G      | 移动到这个文件的最后一行                                                         |
| nG     | 移动到这个文件的第 n 行                                                          |
| gg     | 移动到这个文件的第一行                                                           |
| 0      | 移动到光标所在行开始处                                                           |
| $      | 移动到光标所在行的最后一个位置                                                   |
| yy     | 复制光标所在的一行                                                               |
| nyy    | 复制第 n 行                                                                      |
| p      | 光标的下一行开始复制                                                             |
| P      | 光标的上一行开始复制                                                             |
| u      | 复原                                                                             |
| :w     | 保存                                                                             |
| :w!    | 强制保存                                                                         |
| :q     | 离开                                                                             |
| :q!    | 强制离开不保存                                                                   |
| Ctrl+f | 屏幕向下移动一页                                                                 |
|        |                                                                                  |
| Ctrl+b | 屏幕向上移动一页                                                                 |
| o      | 进入插入模式后，是插入新的一行，从行首开始输入文字                               |
| a      | 进入插入模式后，是从目前光标所在位置的下一个位置开始输入文字                     |
| i      | 切换进入插入模式「insert mode」，按“i”进入插入模式后是从光标当前位置开始输入文件 |
| u      | 复原或者称为返回上一个操作                                                       |
| [ b    | previous buffer                                                                  |
| ] b    | next buffer                                                                      |

visual mode

编辑过程中，常用的操作无非为删除，复制，粘贴，翻页，复原
复原
重复上一操作
ctrl + r
*** evil-escape
可以用 evil-escape，按 kj 或者 fd 就等价于按 esc.
** lazy-set-key
这个插件可以很方便地将 emacs 中所以 key 全部清除，然后可以方便地添加新的 key。
** lispy
这个插件做的事情就是insert 状态下文本编辑状态。

| key   | behavior            |
| m-d   | lispy-kill-words    |
| C-e   | lispy-move-end-line |
| c-m-b | lispy-back-word     |


** evil-lispy
爽！

** lispyville
这个插件我一直想学会！ motion normal visual 三种状态，快捷键不一样！

;; before (cursor at |)
(foo  ; bar baz)

在 vi 的世界里，yank 是 copy 的意思，save-to-kill-ring 是复制。

| 功能 | 快捷键                               | states |
| J    | evil-join (将下行内容直接拉倒同一行) | normal |
| ;    | comment                              | normal |
| y    | yank (copy)                          | normal |
| dd   | delete                               | normal |
| cc   | delete the line, then insert         | normal |
| c    | change                               | normal    |



Spacemacs
** multiple-cursor
这个包可以很方便地删除多行操作。

** treemacs
这个包类似于.


** org
喜欢打开 org-indent-mode 这样可以同样 level 下标题能够缩进。
*** 配置
    #+begin_src lisp
      (require 'org-tempo) ;<s能够补全代码块 or org-structure-template-alist C-c C-,
    #+end_src

 | 功能                                                 | 快捷键                     |
 |------------------------------------------------------+----------------------------|
 | 把当前位置压入 mark ring 中,以方便以后方便跳回该位置 | C-c % (org-mark-ring-push) |
 | org-structure-template-alist                         | C-c C-,                    |
 | 插入 org 脚注                                        | M-ret f r                  |
 | org-cdlatex 插入环境 template                        | C-c {                      |
 | org-toggle-latex-fragment(将 latex 公式转换为图片)   | C-c C-x C-l                |
 | org-table-insert-column                              |                            |
 | org-table-insert-row                                 |                            |

*** evil-org-mode
| 功能  | 快捷键                          |
|-------+---------------------------------|
| gh    | outline-up-heading              |
| gj    | org-forward-heading-same-level  |
| gk    | org-backward-heading-same-level |
| gl    | outline-next-visible-heading    |
| t     | org-todo                        |
| T     | org-insert-todo-heading         |
| H     | org-shiftleft                   |
| J     | org-shiftright                  |
| K     | org-shiftup                     |
| L     | org-shiftdown                   |
| o     | always-insert-item              |
| O     | org-insert-heading              |
| ’$’ | org-end-of-line                 |
| ’^’ | org-beginning-of-line           |
|       |                                 |


<	org-metaleft
>	org-metaright
<leader>a	org-agenda
<leader>t	org-show-todo-tree
<leader>c	org-archive-subtree
<leader>l	evil-org-open-links
<leader>o	evil-org-recompute-clocks

在 org-mode 里面运行 python 真是不容易！可以对 python 代码进行补全，但是必须先运行 run-python!

#+begin_export lisp
  ;;这个函数很重要！
(add-hook 'ipython-mode-hook
          (lambda ()
            (setq-local completion-at-point-functions
                        '(pcomplete-completions-at-point python-completion-at-point))))
;; (add-hook 'python-mode-hook
;;           (lambda ()
;;             (setq-local completion-at-point-functions
;;                         '(pcomplete-completions-at-point python-completion-at-point))))

(define-key evil-insert-state-map (kbd "C-S-l") 'completion-at-point)

(defun ob-ipython-eldoc-function ()
  (when (org-babel-where-is-src-block-head)
    (python-eldoc-function)))

(add-hook 'org-mode-hook
          (lambda ()
            (setq-default eldoc-documentation-function 'ob-ipython-eldoc-function)))

#+end_export

*** smartparens
这个插件可以快速实现括号内容的直接的跳转。



*** olivetti
这个包可以将文字居中。

*** toc-org
org-set-tags-command(c-c c-q) 放在第一个标题后面输入这个命令,即可生成 toc.
*** org-agenda
https://www.zhihu.com/topic/19649552/hot
可以方便地记录每项工作花费的时间.

- 工作状态

很方便, t 即可!

- 安排任务时间

使用快捷键 c-c c-s 就可以安排对应任务的时间了.

- 任务计时

我们将光标移动到想要进行时间记录的任务上，然后按 Ctrl c + Ctrl x + Ctrl i 就能够进行任务开始时间的记录了
*** org-download
abo 大神还有多少好东西!
可以下载图片,以后有空研究.
https://github.com/abo-abo/org-download
** bm
bm-book-line 可以设置 bookmark 用于快速跳转
bm-remove-all-buffers 可以删除所有标记的 bookmark,真的很方便！
** hydra
hydra-goto-line 用于快速跳转到固定的行，以及标记 mark,真的是很方便。
** shell
在 spacemacs 中，有专门的 shell layer，但是目前还不是很熟悉，可以先用 eshell 代替，后面再做研究。
| 功能  | 快捷键     |
|-------+------------|
| shell | M-x eshell |
| shell | M-X shell  |
|       |            |
** yas-nippet

要使用某个 snippet 很简单,只需要输入缩写然后按下 M-/ or tab 就行了.

| 功能              | 快捷键                      |
| yas-expand        | M-/                         |
| yas-insert-sippet | M-x yas-insert-sippet       |
| 查看 Yasnippet       | helm-yas-visit-snippet-file |
*** creat new yasnippet

| 功能      | key       |
| org-title | org-title |
|           |           |



参考文献：
https://github.com/lujun9972/emacs-document/blob/master/emacs-common/在Spacemacs中为Yasnippet添加自定义snippet.org
** others packages
*** pyim
**** 手动加词和删词

`pyim-create-Ncchar-word-at-point 这是一组命令，从光标前提取 N 个汉字字符组成字符串，并将其加入个人词库。

`pyim-translate-trigger-char' 以默认设置为例：在“我爱吃红烧肉”后输入“5v” 可以将“爱吃红烧肉”这个词条保存到用户个人词库。

`pyim-create-word-from-selection', 选择一个词条，运行这个命令后，就可以将这个词条添加到个人词库。

`pyim-delete-word' 从个人词库中删除当前高亮选择的词条。
*** color-rg
挨吗，太用了！
https://github.com/manateelazycat/color-rg

(add-to-list 'load-path "<path-to-color-rg>") ; add color-rg to your load-path
(require 'color-rg)

color-rg-search-input 谁用谁知道。
*** awesome-tab
lazycat 又一作品，优秀！


命令	解释
awesome-tab-forward-tab	切换到左边的标签
awesome-tab-backward-tab	切换到右边的标签
awesome-tab-forward-group	切换到前一个分组
awesome-tab-backward-group	切换到后一个分组
awesome-tab-select-beg-tab	选择第一个标签
awesome-tab-select-end-tab	选择最后一个标签
awesome-tab-forward-tab-other-window	切换到其他窗口的下一个标签
awesome-tab-backward-tab-other-window	切换到其他窗口的上一个标签
awesome-tab-kill-all-buffers-in-current-group	删除当前分组的所有标签
awesome-tab-kill-match-buffers-in-current-group	删除当前分组的匹配的标签
awesome-tab-keep-match-buffers-in-current-group	保留当前分组的匹配的标签
awesome-tab-switch-group	基于模糊搜索算法切换不同的分组

*** pdf-tools

看 pdf 神器！

| 快捷键 | 功能   |
| J      | 下一页 |
| +      | 放大   |
| -      | 缩小   |
|        |        |

*** python
在 py 文件中，一定要先运行 pyvenv-workon, run-python 命令否则 emacs 就散退。


** 安装各种包遇到的坑
*** ess
这个包遇到的坑何其多，所以记录详细配置过程。

#+BEGIN_SRC lisp
  (ess :variables
       ess-assign-key "\M--"
       ;;windows版本需要加以下语法，mac不需要
       inferior-R-program-name "F:\\LJ\\R-3.6.1\\bin\\x64\\Rterm.exe")
#+END_SRC

ess 环境配置比较麻烦，主要要确认系统默认的 R version，这涉及到环境变量的配置。在 mac 中，环境变量主要在~/.bashrc 和~/.bash_profile 两个文件中。

#+BEGIN_SRC R
  .libPaths()
  Sys.getenv()
  sessionInfo()
  #+END_SRC
