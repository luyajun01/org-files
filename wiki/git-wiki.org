* git_wiki                                                                      :toc:
  - [[#基本命令][基本命令]]
    - [[#利用-git-上传本地文件文件夹到-github][利用 git 上传本地文件、文件夹到 GitHub]]
  - [[#如何在-githubcom-上删除某个-repository-中的某个文件夹][如何在 GitHub.com 上删除某个 Repository 中的某个文件夹？]]
  - [[#magit][magit]]
    - [[#stage-git-add-与-unstage][Stage (git add )与 Unstage]]
  - [[#magit-1][magit]]
- [[#linux][linux]]
  - [[#常用文件夹][常用文件夹]]
  - [[#打开-terminial][打开 terminial]]
  - [[#打开文件夹][打开文件夹]]
  - [[#删除文件夹][删除文件夹]]

** 基本命令
*** 利用 git 上传本地文件、文件夹到 GitHub 

- 1.输入自己的用户名和邮箱（为注册 GITHUB 账号时的用户名和邮箱）
 
#+begin_src git
$ git config --global user.name "luyajun01@gmail.com"
  $ git config --global user.email "luyajun01@gmail.com"
#+end_src

- 2.设置 SSH key
#+begin_src git
   $ cd ~/.ssh
   $ ls 
#+end_src
如果没有密钥，则执行以下命令来生成密钥：
#+begin_src git
 $ ssh-keygen -t rsa -C "luyajun01@gmail.com" 
#+end_src
生成过程中按 3 次回车键就好（默认路径，默认没有密码登录），生成成功后，去对应默认路径里用记事本打开 id_rsa.pub，得到 ssh key 公钥。

- 3.上传本地文件

（1）首先进入 layout 文件夹

#+begin_src git
$ cd d:\layout //假如需要上传的文件是d 盘文件
#+end_src

（2）执行指令进行初始化，会在原始文件夹中生成一个隐藏的文件夹.git：

#+begin_src git
  $ git init //指令初始化，会在原始文件夹生成一个隐藏的文件夹.git
#+end_src

（3）执行指令将文件添加到本地仓库：
#+begin_src git
     $ git add .         //添加当前文件夹下的所有文件
    $ git add **.cpp    //添加当前文件夹下的**.cpp这个文件 
#+end_src

（4）输入本次的提交说明，准备提交暂存区中的更改的已跟踪文件，单引号内为说明内容：
#+begin_src git
    $ git commit -m "layout"  //引号中的内容为对该文件的描述 
#+end_src

- 4.关联 github 仓库

在 github 中新建一个 repository，复制仓库地址：

执行命令：
#+begin_src git
   //新建一个repository时会出现下面的代码，直接复制即可
   $ git remote add origin https://github.com/CongliYin/CSS.git 
#+end_src

如果出现错误：fatal: remote origin already exists，则执行以下语句：
#+begin_src git
 $ git remote rm origin 
#+end_src
再重新执行：
#+begin_src git
 $ git remote add origin https://github.com/CongliYin/CSS.git 
#+end_src
即可成功。
最后执行命令：

#+begin_src git
     $ git push origin master 
#+end_src

** 如何在 GitHub.com 上删除某个 Repository 中的某个文件夹？
git rm -r --cached .idea  #--cached 不会把本地的.idea 删除
git commit -m 'delete .idea dir'
git push -u origin master

** magit
运行 M-x:magit-status 打开当前 git 仓库 (如果当前没仓库会让你选择相应的路径)

| 功能                                          | 界面             |
| 当前处于哪个 branch                           | head             |
| 要 push 到哪个远程 branch                     | push             |
| 哪些文件未被 git 管理                         | Untracked files  |
| 哪些文件修改了未 stage                        | Unstaged Changes |
| 哪些文件处于 staged 状态（即运行了 git add ） | Staged Changes   |
| 哪些 commit 未 push 到远程分支                | Unpushed to      |
| 哪些提交 未拉取到本地                         | Unpulled from    |
|                                               |                  |
|                                               |                  |
|                                               |                  |

甚至可以查看具体文件修改了哪些内容
在相应的文件上回车则打开那个文件,在相应的修改部位回车则直接跳转到文件修改的位置
在相应的 commit 上回车则能查看此次 commit 都修改了哪些文件，具体的文件进行了哪些修改

*** Stage (git add )与 Unstage
如果你修改了一个 git 管理的文件，但是未运行 git add 则当前文件处于 Unstaged 状态
运行 git add 之后则处于 Stage 状态。git commit 之后，则变成了一个 commit 会处于 Unpushed 状态

s 	Stage 	git add filename 	从 unstaged 变成 staged
u 	Unstage 	git reset HEAD filename 	从 staged 变成 Unstaged

可以通过 cc 来创建 git commit,通过 push 来 push git。
** magit
参考连接:https://www.jianshu.com/p/990e69407b44
文件管理神器 magit. 

傻瓜流程:

magit-status| s |c-c|pp

需求:

1.修改本地仓储.(本地操作,magit-status)

2.stage 这些修改 (s)

3.提交修改.(创建 commit，然后 c-c)

4.push 到远端 github （p-p）

Git 工作流程

代码仓库的管理，即管理四棵“Tree”，远程仓库(remote repository)、本地仓库(HEAD/local repository)、缓冲区(INDEX/stage)、本地目录(Local directory)。

严格来说，管理的三棵树：仓库、缓冲区、本地目录；使用频繁的基本操作：

检出仓库：git clone <server:/repository>

跟踪文件：git add <filename>，添加至缓存区

取消跟踪文件：git rm --cached <filename>

提交：git commit -m "代码提交信息"，提交到本地仓库(Local repository)

删除文件：git rm <filename>，取消 HEAD 的提交，并将本地文件置为“Stage：delete”状态

检出文件：git checkout <filename>，使用最新的提交覆盖目标文件

rollback：git reset --soft <commit>，保持当前文件修改的状态，版本 rollback 至 commit 版本

                git reset --hard <commit>, 版本 rollback 至 commit 版本

新建/切换分支：git branch <branch_name>

删除分支：git branch -d <branch_name>

检出(远程)分支：git checkout -b <(origin/)branch_name>

推送分支：git push origin <branch_name>，推送至远程仓库

设置推送的目标远程仓库：git remote add origin <server>，在推送分支前，需先配置

同步代码：git pull，本地仓库更新到远程仓库的最新提交

合并分支至当前分支：git merge <branch_name>

丢弃本地改动及提交，同步最新远程仓库版本：git reset --hard <origin/branch_name> 或 git fetch orgin



* linux 
** 常用文件夹
| 文件名       | 命令                    |
| .spacemacs.d | nautilus ~/.spacemacs.d |
| rime         | ~/.config/fcitx/rime    |
|              |                         |

** 打开 terminial
ctrl + alt + t 打开终端

   #+begin_src 
    创建文件： touch a.txt
    创建文件夹： mkdir NewFolder
    删除文件： rm a.txt
    删除文件夹： rmdir NewFolder
    删除带有文件的文件夹： rm -r NewFolder
   #+end_src

** 打开文件夹
以下代码可以在 ubuntu 的 terminal 里方便地打开文件夹。
#+begin_src  
nautilus ~/.emacs.d
#+end_src

** 删除文件夹
   #+begin_src 
rmdir ~/.spacemacs.d
   #+end_src







