#time <- rexp(n)/h
#p.censor=0.25
#status <- sample(c(0, 1),n,replace = TRUE, prob = c(p.censor,
#                                                      1 - p.censor))
y<-cbind(time=T,status=delta)
z=x
cox.ladlasso(y,z)
coef(cv.glmnet(x=z,y=y,family="cox"))
n=200
x1<-runif(n,0,1)
x2<-runif(n,0,1)
x3<-runif(n,0,1)
x4<-runif(n,0,1)
x5<-rbern(n,prob=0.4)
x6<-rbern(n,prob=0.4)
x7<-rbern(n,prob=0.4)
x8<-rbern(n,prob=0.4)
x=cbind(x1,x2,x3,x4,x5,x6,x7,x8)
beta=c(3,1.5,0,0,1,0,-0.5,0)
HR<-rep(NA,2)
HR<-c(exp(x%*%beta)[which.max(exp(x%*%beta))],exp(x%*%beta)[which.min(exp(x%*%beta))])
u=rbern(n,prob=0.5)
p1<-sample(n,n*0)
outlier<-u*HR[2]+(1-u)*HR[1]
h<-as.vector(exp(x%*%beta))
h[p1]=outlier[p1]
C<-runif(n,0,10)
U=runif(1,.05,.1)
X<-rexp(n,U*h)
delta<-ifelse(C>=X,1,0)
T<-ifelse(C>=X,X,C)
#time <- rexp(n)/h
#p.censor=0.25
#status <- sample(c(0, 1),n,replace = TRUE, prob = c(p.censor,
#                                                      1 - p.censor))
y<-cbind(time=T,status=delta)
z=x
cox.ladlasso(y,z)
source("cox.ladlasso1.r")
cox.ladlasso(y,z)
n=200
x1<-runif(n,0,1)
x2<-runif(n,0,1)
x3<-runif(n,0,1)
x4<-runif(n,0,1)
x5<-rbern(n,prob=0.4)
x6<-rbern(n,prob=0.4)
x7<-rbern(n,prob=0.4)
x8<-rbern(n,prob=0.4)
x=cbind(x1,x2,x3,x4,x5,x6,x7,x8)
beta=c(3,1.5,0,0,1,0,-0.5,0)
HR<-rep(NA,2)
HR<-c(exp(x%*%beta)[which.max(exp(x%*%beta))],exp(x%*%beta)[which.min(exp(x%*%beta))])
u=rbern(n,prob=0.5)
p1<-sample(n,n*0)
outlier<-u*HR[2]+(1-u)*HR[1]
h<-as.vector(exp(x%*%beta))
h[p1]=outlier[p1]
C<-runif(n,0,10)
U=runif(1,.05,.1)
X<-rexp(n,U*h)
delta<-ifelse(C>=X,1,0)
T<-ifelse(C>=X,X,C)
#time <- rexp(n)/h
#p.censor=0.25
#status <- sample(c(0, 1),n,replace = TRUE, prob = c(p.censor,
#                                                      1 - p.censor))
y<-cbind(time=T,status=delta)
z=x
cox.ladlasso(y,z)
coef(cv.glmnet(x=z,y=y,family="cox"))
n=200
x1<-runif(n,0,1)
x2<-runif(n,0,1)
x3<-runif(n,0,1)
x4<-runif(n,0,1)
x5<-rbern(n,prob=0.4)
x6<-rbern(n,prob=0.4)
x7<-rbern(n,prob=0.4)
x8<-rbern(n,prob=0.4)
x=cbind(x1,x2,x3,x4,x5,x6,x7,x8)
beta=c(3,1.5,0,0,1,0,-0.5,0)
HR<-rep(NA,2)
HR<-c(exp(x%*%beta)[which.max(exp(x%*%beta))],exp(x%*%beta)[which.min(exp(x%*%beta))])
u=rbern(n,prob=0.5)
p1<-sample(n,n*0)
outlier<-u*HR[2]+(1-u)*HR[1]
h<-as.vector(exp(x%*%beta))
h[p1]=outlier[p1]
C<-runif(n,0,10)
U=runif(1,.05,.1)
X<-rexp(n,U*h)
delta<-ifelse(C>=X,1,0)
T<-ifelse(C>=X,X,C)
#time <- rexp(n)/h
#p.censor=0.25
#status <- sample(c(0, 1),n,replace = TRUE, prob = c(p.censor,
#                                                      1 - p.censor))
y<-cbind(time=T,status=delta)
z=x
cox.ladlasso(y,z)
source("cox.ladlasso2.r")
# simultion for coxlad lasso
# thoughts from "Robust estimation for the Cox regression model based on trimming"
library(MASS)
library(Rlab)
library(tidyverse)
library(survival)
library(glmnet)
library(coxrobust)
source("cox.ladlasso2.r")
n=200
x1<-runif(n,0,1)
x2<-runif(n,0,1)
x3<-runif(n,0,1)
x4<-runif(n,0,1)
x5<-rbern(n,prob=0.4)
x6<-rbern(n,prob=0.4)
x7<-rbern(n,prob=0.4)
x8<-rbern(n,prob=0.4)
x=cbind(x1,x2,x3,x4,x5,x6,x7,x8)
beta=c(3,1.5,0,0,1,0,-0.5,0)
HR<-rep(NA,2)
HR<-c(exp(x%*%beta)[which.max(exp(x%*%beta))],exp(x%*%beta)[which.min(exp(x%*%beta))])
u=rbern(n,prob=0.5)
p1<-sample(n,n*0)
outlier<-u*HR[2]+(1-u)*HR[1]
h<-as.vector(exp(x%*%beta))
h[p1]=outlier[p1]
C<-runif(n,0,10)
U=runif(1,.05,.1)
X<-rexp(n,U*h)
delta<-ifelse(C>=X,1,0)
T<-ifelse(C>=X,X,C)
#time <- rexp(n)/h
#p.censor=0.25
#status <- sample(c(0, 1),n,replace = TRUE, prob = c(p.censor,
#                                                      1 - p.censor))
y<-cbind(time=T,status=delta)
z=x
cox.ladlasso(y,z,lambda = 0.03)
x=z;z=scale(z);dt <- data.frame(cbind(y,z));dt <- dt[order(dt[,1]),]
z <- dt[,3:ncol(dt)];eventx <- subset(dt,dt$status==1);unique_time <- unique(eventx[,1])
R <- sapply(unique(eventx[,1]), function(t){
which(dt[,1]>=t)
})
prep0=coxprep(z,y);nevent= prep0$nevent;nevent1= prep0$nevent1;
loc1=prep0$loc1;n=prep0$n;tevent=prep0$tevent;N=prep0$N;
i=1
tol_curr = 1
#lambdai=rep(lambda,ncol(z))
lambdai=lambda
lambda=0.04
#lambdai=rep(lambda,ncol(z))
lambdai=lambda
beta.old=coef(coxph(Surv(y)~x))
eta=matrix(as.numeric(unlist(z)),nc=ncol(z),nr=nrow(z))%*%beta.old
xb=eta
exb=exp(eta)
#M <- quantile(as.vector(dt[,1]*exp(eta)),trunc,names = FALSE)
#A=M-min(M,as.vector(dt[,1]*exp(eta)))
#lmb.ple <- as.double(cumsum(dt[,2]/rev( cumsum( rev(exp(eta)) ) ) ))
dl1<-rep(NA,nrow(z));dl2<-rep(NA,nrow(z))
de=dletaCm(exb,tevent,N,nevent,nevent1,loc1,n)
d1=de$pl1;d2=de$pl2
z<-matrix(as.numeric(unlist(z)),nc=ncol(z),nr=nrow(z))
hessian=xb+d1/d2
z<-matrix(as.numeric(unlist(z)),nc=ncol(z),nr=nrow(z))
hessian=z%*%beta.old+solve(diag(as.vector(d2)))%*%d1
yt=c(d2*hessian,rep(0,ncol(z)))
newx=matrix(NA,nc=ncol(z),nr=nrow(z))
for (i in 1:nrow(z)) {
newx[i,]<-d2[i]*z[i,]
}
#lambdai=log(nrow(z))/(nrow(z)*abs(beta.old))
#lambdai=log(nrow(z))/(nrow(z)*abs(beta.old))
x<-rbind(newx,nrow(z)*lambdai*diag(ncol(z)))
beta<-coef(rq(yt~x-1))
beta
source("cox.ladlasso2.r")
cox.ladlasso(y,z,lambda = 0.03)
source("cox.ladlasso2.r")
cox.ladlasso(y,z,lambda = 0.03)
x=z;z=scale(z);dt <- data.frame(cbind(y,z));dt <- dt[order(dt[,1]),]
z <- dt[,3:ncol(dt)];eventx <- subset(dt,dt$status==1);unique_time <- unique(eventx[,1])
R <- sapply(unique(eventx[,1]), function(t){
which(dt[,1]>=t)
})
prep0=coxprep(z,y);nevent= prep0$nevent;nevent1= prep0$nevent1;
loc1=prep0$loc1;n=prep0$n;tevent=prep0$tevent;N=prep0$N;
i=1
tol_curr = 1
#lambdai=rep(lambda,ncol(z))
lambdai=lambda
while (tol < tol_curr && i < iter) {
beta.old=coef(coxph(Surv(y)~x))
eta=matrix(as.numeric(unlist(z)),nc=ncol(z),nr=nrow(z))%*%beta.old
xb=eta
exb=exp(eta)
#M <- quantile(as.vector(dt[,1]*exp(eta)),trunc,names = FALSE)
#A=M-min(M,as.vector(dt[,1]*exp(eta)))
#lmb.ple <- as.double(cumsum(dt[,2]/rev( cumsum( rev(exp(eta)) ) ) ))
dl1<-rep(NA,nrow(z));dl2<-rep(NA,nrow(z))
de=dletaCm(exb,tevent,N,nevent,nevent1,loc1,n)
d1=de$pl1;d2=de$pl2
z<-matrix(as.numeric(unlist(z)),nc=ncol(z),nr=nrow(z))
hessian=xb+d1/d2
z<-matrix(as.numeric(unlist(z)),nc=ncol(z),nr=nrow(z))
hessian=z%*%beta.old+solve(diag(as.vector(d2)))%*%d1
yt=c(d2*hessian,rep(0,ncol(z)))
newx=matrix(NA,nc=ncol(z),nr=nrow(z))
for (i in 1:nrow(z)) {
newx[i,]<-d2[i]*z[i,]
}
#lambdai=log(nrow(z))/(nrow(z)*abs(beta.old))
#lambdai=log(nrow(z))/(nrow(z)*abs(beta.old))
x<-rbind(newx,nrow(z)*lambdai*diag(ncol(z)))
beta<-coef(rq(yt~x-1))
tol_curr=crossprod(beta-beta.old)
i = i + 1
if (verbose && i%%10 == 0) message(i)
}
beta.old=coef(coxph(Surv(y)~x))
eta=matrix(as.numeric(unlist(z)),nc=ncol(z),nr=nrow(z))%*%beta.old
xb=eta
exb=exp(eta)
#M <- quantile(as.vector(dt[,1]*exp(eta)),trunc,names = FALSE)
#A=M-min(M,as.vector(dt[,1]*exp(eta)))
#lmb.ple <- as.double(cumsum(dt[,2]/rev( cumsum( rev(exp(eta)) ) ) ))
dl1<-rep(NA,nrow(z));dl2<-rep(NA,nrow(z))
de=dletaCm(exb,tevent,N,nevent,nevent1,loc1,n)
d1=de$pl1;d2=de$pl2
z<-matrix(as.numeric(unlist(z)),nc=ncol(z),nr=nrow(z))
hessian=xb+d1/d2
z<-matrix(as.numeric(unlist(z)),nc=ncol(z),nr=nrow(z))
hessian=z%*%beta.old+solve(diag(as.vector(d2)))%*%d1
yt=c(d2*hessian,rep(0,ncol(z)))
newx=matrix(NA,nc=ncol(z),nr=nrow(z))
for (i in 1:nrow(z)) {
newx[i,]<-d2[i]*z[i,]
}
#lambdai=log(nrow(z))/(nrow(z)*abs(beta.old))
#lambdai=log(nrow(z))/(nrow(z)*abs(beta.old))
x<-rbind(newx,nrow(z)*lambdai*diag(ncol(z)))
beta<-coef(rq(yt~x-1))
tol_curr=crossprod(beta-beta.old)
tol_curr
beta.old=coef(coxph(Surv(y)~x))
n=200
x1<-runif(n,0,1)
x2<-runif(n,0,1)
x3<-runif(n,0,1)
x4<-runif(n,0,1)
x5<-rbern(n,prob=0.4)
x6<-rbern(n,prob=0.4)
x7<-rbern(n,prob=0.4)
x8<-rbern(n,prob=0.4)
x=cbind(x1,x2,x3,x4,x5,x6,x7,x8)
beta=c(3,1.5,0,0,1,0,-0.5,0)
HR<-rep(NA,2)
HR<-c(exp(x%*%beta)[which.max(exp(x%*%beta))],exp(x%*%beta)[which.min(exp(x%*%beta))])
u=rbern(n,prob=0.5)
p1<-sample(n,n*0)
outlier<-u*HR[2]+(1-u)*HR[1]
h<-as.vector(exp(x%*%beta))
h[p1]=outlier[p1]
C<-runif(n,0,10)
U=runif(1,.05,.1)
X<-rexp(n,U*h)
delta<-ifelse(C>=X,1,0)
T<-ifelse(C>=X,X,C)
#time <- rexp(n)/h
#p.censor=0.25
#status <- sample(c(0, 1),n,replace = TRUE, prob = c(p.censor,
#                                                      1 - p.censor))
y<-cbind(time=T,status=delta)
z=x
cox.ladlasso(y,z,lambda = 0.03)
source("cox.ladlasso2.r")
cox.ladlasso(y,z,lambda = 0.03)
source("cox.ladlasso2.r")
n=200
x1<-runif(n,0,1)
x2<-runif(n,0,1)
x3<-runif(n,0,1)
x4<-runif(n,0,1)
x5<-rbern(n,prob=0.4)
x6<-rbern(n,prob=0.4)
x7<-rbern(n,prob=0.4)
x8<-rbern(n,prob=0.4)
x=cbind(x1,x2,x3,x4,x5,x6,x7,x8)
beta=c(3,1.5,0,0,1,0,-0.5,0)
HR<-rep(NA,2)
HR<-c(exp(x%*%beta)[which.max(exp(x%*%beta))],exp(x%*%beta)[which.min(exp(x%*%beta))])
u=rbern(n,prob=0.5)
p1<-sample(n,n*0)
outlier<-u*HR[2]+(1-u)*HR[1]
h<-as.vector(exp(x%*%beta))
h[p1]=outlier[p1]
C<-runif(n,0,10)
U=runif(1,.05,.1)
X<-rexp(n,U*h)
delta<-ifelse(C>=X,1,0)
T<-ifelse(C>=X,X,C)
#time <- rexp(n)/h
#p.censor=0.25
#status <- sample(c(0, 1),n,replace = TRUE, prob = c(p.censor,
#                                                      1 - p.censor))
y<-cbind(time=T,status=delta)
z=x
cox.ladlasso(y,z,lambda = 0.03)
cox.ladlasso(y,z)
x=z;z=scale(z);dt <- data.frame(cbind(y,z));dt <- dt[order(dt[,1]),]
z <- dt[,3:ncol(dt)];eventx <- subset(dt,dt$status==1);unique_time <- unique(eventx[,1])
R <- sapply(unique(eventx[,1]), function(t){
which(dt[,1]>=t)
})
prep0=coxprep(z,y);nevent= prep0$nevent;nevent1= prep0$nevent1;
loc1=prep0$loc1;n=prep0$n;tevent=prep0$tevent;N=prep0$N;
beta.old=coef(coxph(Surv(y)~x))
eta=matrix(as.numeric(unlist(z)),nc=ncol(z),nr=nrow(z))%*%beta.old
xb=eta
exb=exp(eta)
#M <- quantile(as.vector(dt[,1]*exp(eta)),trunc,names = FALSE)
#A=M-min(M,as.vector(dt[,1]*exp(eta)))
#lmb.ple <- as.double(cumsum(dt[,2]/rev( cumsum( rev(exp(eta)) ) ) ))
dl1<-rep(NA,nrow(z));dl2<-rep(NA,nrow(z))
de=dletaCm(exb,tevent,N,nevent,nevent1,loc1,n)
d1=de$pl1;d2=de$pl2
z<-matrix(as.numeric(unlist(z)),nc=ncol(z),nr=nrow(z))
hessian=xb+d1/d2
z<-matrix(as.numeric(unlist(z)),nc=ncol(z),nr=nrow(z))
hessian=z%*%beta.old+solve(diag(as.vector(d2)))%*%d1
#yt=c(d2*hessian,rep(0,ncol(z)))
yt=d2*hessian
newx=matrix(NA,nc=ncol(z),nr=nrow(z))
for (i in 1:nrow(z)) {
newx[i,]<-d2[i]*z[i,]
}
#lambdai=log(nrow(z))/(nrow(z)*abs(beta.old))
#x<-rbind(newx,nrow(z)*lambdai*diag(ncol(z)))
beta<-coef(cv.rq.pen(newx,yt,tau=0.5,penalty = "LASSO",intercept = FALSE))
beta
coef(cv.glmnet(x=z,y=y,family="cox"))
cox.ladlasso(y,z)
# simultion for coxlad lasso
# thoughts from "Robust estimation for the Cox regression model based on trimming"
library(MASS)
library(Rlab)
library(tidyverse)
library(survival)
library(glmnet)
library(coxrobust)
source("cox.ladlasso2.r")
n=200
x1<-runif(n,0,1)
x2<-runif(n,0,1)
x3<-runif(n,0,1)
x4<-runif(n,0,1)
x5<-rbern(n,prob=0.4)
x6<-rbern(n,prob=0.4)
x7<-rbern(n,prob=0.4)
x8<-rbern(n,prob=0.4)
x=cbind(x1,x2,x3,x4,x5,x6,x7,x8)
beta=c(3,1.5,0,0,1,0,-0.5,0)
HR<-rep(NA,2)
HR<-c(exp(x%*%beta)[which.max(exp(x%*%beta))],exp(x%*%beta)[which.min(exp(x%*%beta))])
u=rbern(n,prob=0.5)
p1<-sample(n,n*0)
outlier<-u*HR[2]+(1-u)*HR[1]
h<-as.vector(exp(x%*%beta))
h[p1]=outlier[p1]
C<-runif(n,0,10)
U=runif(1,.05,.1)
X<-rexp(n,U*h)
delta<-ifelse(C>=X,1,0)
T<-ifelse(C>=X,X,C)
#time <- rexp(n)/h
#p.censor=0.25
#status <- sample(c(0, 1),n,replace = TRUE, prob = c(p.censor,
#                                                      1 - p.censor))
y<-cbind(time=T,status=delta)
z=x
cox.ladlasso(y,z)
coef(cv.glmnet(x=z,y=y,family="cox"))
# simultion for coxlad lasso
# thoughts from "Robust estimation for the Cox regression model based on trimming"
library(MASS)
library(Rlab)
library(tidyverse)
library(survival)
library(glmnet)
library(coxrobust)
source("cox.ladlasso2.r")
n=200
x1<-runif(n,0,1)
x2<-runif(n,0,1)
x3<-runif(n,0,1)
x4<-runif(n,0,1)
x5<-rbern(n,prob=0.4)
x6<-rbern(n,prob=0.4)
x7<-rbern(n,prob=0.4)
x8<-rbern(n,prob=0.4)
x=cbind(x1,x2,x3,x4,x5,x6,x7,x8)
beta=c(3,1.5,0,0,1,0,-0.5,0)
HR<-rep(NA,2)
HR<-c(exp(x%*%beta)[which.max(exp(x%*%beta))],exp(x%*%beta)[which.min(exp(x%*%beta))])
u=rbern(n,prob=0.5)
p1<-sample(n,n*0.2)
outlier<-u*HR[2]+(1-u)*HR[1]
h<-as.vector(exp(x%*%beta))
h[p1]=outlier[p1]
C<-runif(n,0,10)
U=runif(1,.05,.1)
X<-rexp(n,U*h)
delta<-ifelse(C>=X,1,0)
T<-ifelse(C>=X,X,C)
#time <- rexp(n)/h
#p.censor=0.25
#status <- sample(c(0, 1),n,replace = TRUE, prob = c(p.censor,
#                                                      1 - p.censor))
y<-cbind(time=T,status=delta)
z=x
cox.ladlasso(y,z)
coef(cv.glmnet(x=z,y=y,family="cox"))
coxr(Surv(time,status)~x1+x2+x3+x4+x5+x6+x7+x8,data=data,trunc=0.9)
data=data.frame(y,z)
coxr(Surv(time,status)~x1+x2+x3+x4+x5+x6+x7+x8,data=data,trunc=0.9)
coxph(Surv(time,status)~x1+x2+x3+x4+x5+x6+x7+x8,data = data)
# simultion for coxlad lasso
# thoughts from "Robust estimation for the Cox regression model based on trimming"
library(MASS)
library(Rlab)
library(tidyverse)
library(survival)
library(glmnet)
library(coxrobust)
source("cox.ladlasso2.r")
n=200
x1<-runif(n,0,1)
x2<-runif(n,0,1)
x3<-runif(n,0,1)
x4<-runif(n,0,1)
x5<-rbern(n,prob=0.4)
x6<-rbern(n,prob=0.4)
x7<-rbern(n,prob=0.4)
x8<-rbern(n,prob=0.4)
x=cbind(x1,x2,x3,x4,x5,x6,x7,x8)
beta=c(3,1.5,0,0,1,0,-0.5,0)
HR<-rep(NA,2)
HR<-c(exp(x%*%beta)[which.max(exp(x%*%beta))],exp(x%*%beta)[which.min(exp(x%*%beta))])
u=rbern(n,prob=0.5)
p1<-sample(n,n*0.2)
outlier<-u*HR[2]+(1-u)*HR[1]
h<-as.vector(exp(x%*%beta))
h[p1]=outlier[p1]
C<-runif(n,0,10)
U=runif(1,.05,.1)
X<-rexp(n,U*h)
delta<-ifelse(C>=X,1,0)
T<-ifelse(C>=X,X,C)
#time <- rexp(n)/h
#p.censor=0.25
#status <- sample(c(0, 1),n,replace = TRUE, prob = c(p.censor,
#                                                      1 - p.censor))
y<-cbind(time=T,status=delta)
z=x
cox.ladlasso(y,z)
coef(cv.glmnet(x=z,y=y,family="cox"))
# simultion for coxlad lasso
# thoughts from "Robust estimation for the Cox regression model based on trimming"
library(MASS)
library(Rlab)
library(tidyverse)
library(survival)
library(glmnet)
library(coxrobust)
source("cox.ladlasso2.r")
n=200
x1<-runif(n,0,1)
x2<-runif(n,0,1)
x3<-runif(n,0,1)
x4<-runif(n,0,1)
x5<-rbern(n,prob=0.4)
x6<-rbern(n,prob=0.4)
x7<-rbern(n,prob=0.4)
x8<-rbern(n,prob=0.4)
x=cbind(x1,x2,x3,x4,x5,x6,x7,x8)
beta=c(3,1.5,0,0,1,0,-0.5,0)
HR<-rep(NA,2)
HR<-c(exp(x%*%beta)[which.max(exp(x%*%beta))],exp(x%*%beta)[which.min(exp(x%*%beta))])
u=rbern(n,prob=0.5)
p1<-sample(n,n*0.2)
outlier<-u*HR[2]+(1-u)*HR[1]
h<-as.vector(exp(x%*%beta))
h[p1]=outlier[p1]
C<-runif(n,0,10)
U=runif(1,.05,.1)
X<-rexp(n,U*h)
delta<-ifelse(C>=X,1,0)
T<-ifelse(C>=X,X,C)
#time <- rexp(n)/h
#p.censor=0.25
#status <- sample(c(0, 1),n,replace = TRUE, prob = c(p.censor,
#                                                      1 - p.censor))
y<-cbind(time=T,status=delta)
z=x
cox.ladlasso(y,z)
coef(cv.glmnet(x=z,y=y,family="cox"))
library(coxrobust)
data=data.frame(y,z)
result=coxr(Surv(time,status)~x1+x2+x3+x4+x5+x6+x7+x8,data=data,trunc=0.9)
