library(rqPen)
source("coxprep.r")
library(Rcpp)
sourceCpp("delta.cpp")
library(Coxnet)
library(coxrobust)
#system("R CMD SHLIB coxr.c")
source("coxr.re.r")
source("coxr.ple.r")
source("coxr.lambda.r")
#source("coxlad.re.r")
source("coxrlasso.r")
cox.ladlasso<-function(y,x,lambda=lambda, singular.ok = TRUE)
{
  nrow   <- nrow(x)
  ncol   <- ncol(x)
  sorted <- order(y[,1])
  time    <- y[sorted,1]
  status  <- y[sorted,2]
  z       <- as.matrix(x[sorted,])
  skip <- integer(0)
  qrres <- qr(z)
  if ( qrres$rank < ncol ) {
    skip <- qrres$pivot[(qrres$rank+1):length(qrres$pivot)]
    notskip  <- qrres$pivot[1:qrres$rank]
  } else {
    notskip <- 1:ncol
  }
  maxabs <- double(0)
  for ( i in notskip ) {
    if (nlevels(as.factor(z[,i])) == 1) {
      skip <- c(skip, i)
    } else {
      temp <- max( abs(z[,i]) )
      if ( temp != 0 ) {
        z[,i] <- z[,i] / temp
        maxabs <- c(maxabs, temp)
      } else {
        maxabs <- c(maxabs, 1.0)
      }
    }
  }
  if ( length(skip) > 0 ) {
    skip <- sort(skip)
    if ( length(skip) == ncol ) {
      return(list(skip=skip))
    }
    if ( singular.ok ) {
      notskip <- 1:ncol
      notskip <- notskip[!1:ncol %in% skip]
      z       <- as.matrix(z[,notskip])
      ncol    <- ncol(z)
      init    <- init[notskip]
    } else {
      return(list(skip = skip))
    }
  }
  res      <- coxr.ple(rep(0, ncol), time, status, z, nrow, ncol)
  beta     <- res$beta
  lmb <- time
  prev_ezbeta<-exp(z%*%beta)
  trunc=0.9
  M<-quantile(lmb*prev_ezbeta,trunc,names = FALSE)
  #######################################
  #init=coef(coxph(y~z-1))
  res <-coxlad.re(rep(0,ncol),lmb,status,prev_ezbeta,z,M,lambda)
  #res <-coxlad.re(init,lmb,status,prev_ezbeta,z,M,lambda)
  beta<- res$beta
  for (i in 1:3){
    lmb<-coxr.lambda(beta,lmb,status,z,prev_ezbeta,M,nrow(z),f.weight=2)
    prev_ezbeta<-exp(z%*%beta)
    M <- quantile(lmb*prev_ezbeta,trunc,names=FALSE)
    #res <-coxlad.re(rep(0,ncol),lmb,status,prev_ezbeta,z,M,lambda)
    res <-coxlad.re(init,lmb,status,prev_ezbeta,z,M,lambda)
    beta<- res$beta
  }
  tmp=M-lmb*prev_ezbeta
  A=Afun(tmp,z,M)
  if ( length(skip) > 0 ) {
    coef[notskip] <- beta/maxabs
    coef[skip] <- NA
  } else
  {coef<-beta/maxabs} 
  return(list(beta=coef,M=M,A=A))
}
