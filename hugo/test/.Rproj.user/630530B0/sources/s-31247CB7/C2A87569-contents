library(survival)
library(glmnet)
library(rqPen)
library(Coxnet)
source("cox.lasso4.r")
sourceCpp("pletaCm.cpp")
max_lambdaC <- function(X, tevent, N, nevent, nevent1, loc1, n, alpha, wbeta, N0) {
  .Call('Coxnet_max_lambdaC', PACKAGE = 'Coxnet', X, tevent, N, nevent, nevent1, loc1, n, alpha, wbeta, N0)
}
cvcoxenetC <- function(X, tevent, alpha, lambda, nlambda, wbeta, N, nevent, nevent1, loc1, n, p, N0, thresh, maxit, ifast, XF, NF, neventF, nevent1F, loc1F, nF) {
  .Call('Coxnet_cvcoxenetC', PACKAGE = 'Coxnet', X, tevent, alpha, lambda, nlambda, wbeta, N, nevent, nevent1, loc1, n, p, N0, thresh, maxit, ifast, XF, NF, neventF, nevent1F, loc1F, nF)
}
coxenetC <- function(X, tevent, alpha, lambda, nlambda, wbeta, N, nevent, nevent1, loc1, n, p, N0, thresh, maxit, ifast) {
  .Call('Coxnet_coxenetC', PACKAGE = 'Coxnet', X, tevent, alpha, lambda, nlambda, wbeta, N, nevent, nevent1, loc1, n, p, N0, thresh, maxit, ifast)
}
cvtrimC <- function(beta, nn, nn2, loco, XF, NF, neventF, nevent1F, loc1F, nF, X, N, nevent, nevent1, loc1, n, ifast, itwo) {
  .Call('Coxnet_cvtrimC', PACKAGE = 'Coxnet', beta, nn, nn2, loco, XF, NF, neventF, nevent1F, loc1F, nF, X, N, nevent, nevent1, loc1, n, ifast, itwo)
}
cv.coxlasso<-function(y,z,foldid=NULL,alpha=1,nfolds=10,lambda=NULL,nlambda=50) 
{
  foldid=NULL;alpha=1;nfolds=10;lambda=NULL;nlambda=50
  ifast=TRUE
  prep0=coxprep(z,y)
  n = dim(z)[1]
  p = dim(z)[2]
  wbeta=rep(1, p)
  rlambda=NULL
  N0=nrow(z)
  thresh=1e-7;maxit=10^5
tb=table(foldid);N0i=numeric(nfolds)
for (i in 1:nfolds)
N0i[i]=sum(tb[-i])
### Lambda path
if (is.null(lambda)) {
  lambda_max=max_lambdaC(prep0$x, prep0$tevent, prep0$N, prep0$nevent, prep0$nevent1, prep0$loc1, prep0$n, alpha, wbeta, N0)
  lambda_min=ifelse(is.null(rlambda), ifelse(N0>p, lambda_max*0.0001, lambda_max*0.01), lambda_max*rlambda)
  lambda=lambda_max*(lambda_min/lambda_max)^(c(0:(nlambda-1))/(nlambda-1))
} else {
  nlambda=length(lambda)
}
out=coxenetC(prep0$x, prep0$tevent, alpha, lambda, nlambda, wbeta, prep0$N, prep0$nevent, prep0$nevent1, prep0$loc1, prep0$n, p, N0, thresh, maxit, ifast)
nlambdai=out$nlambda
lambdai=lambda[1:nlambdai]
outi=list();cvPL=matrix(NA, nrow=nfolds, ncol=nlambdai)
if (is.null(foldid)) {
  foldid <-randomly_assign(n,nfolds)
}
prepk=list()
for (i in 1:nfolds) {
  temid=which(foldid!=i)
  prepk[[i]]=coxprep(x[temid, ], y[temid, ])
}
for (i in 1:nfolds) {
  outi[[i]]=cvcoxenetC(prepk[[i]]$x, prepk[[i]]$tevent, alpha, lambdai, nlambdai, wbeta, prepk[[i]]$N, prepk[[i]]$nevent, prepk[[i]]$nevent1, prepk[[i]]$loc1, prepk[[i]]$n, p, N0i[i], thresh, maxit, 0, prep0$x, prep0$N, prep0$nevent, prep0$nevent1, prep0$loc1, prep0$n)     
  cvPL[i, 1:outi[[i]]$nlambda]=outi[[i]]$lf[1:outi[[i]]$nlambda]-outi[[i]]$ll[1:outi[[i]]$nlambda]
}
weighti=as.vector(tapply(y[, "status"], foldid, sum))
cvPL=matrix(cvPL[, 1:nlambdai], ncol=nlambdai)
cvraw=cvPL/weighti;nfoldi=apply(!is.na(cvraw), 2, sum);rm(cvPL) #
cvm=apply(cvraw, 2, weighted.mean, w=weighti, na.rm=TRUE)
cvse=sqrt(apply(sweep(cvraw, 2, cvm, "-")^2, 2, weighted.mean, w=weighti, na.rm=TRUE)/(nfoldi-1))
indexi=which.max(cvm)
indexij=which(cvm>=(cvm[indexi]-cvse[indexi]))[1]
temi=rep("", nlambdai)
temi[indexi]="max"
#temi[indexi]="**";temi[indexij]=ifelse(temi[indexij]=="", "*", "***")
temCV=data.frame(lambda=lambdai,cvm=cvm,cvse=cvse,nzero=out$nzero,index=temi,stringsAsFactors=FALSE)

lam.opt=lambda[which.min(cvse)]
coef=cox.lasso(z=z,y=y,lambda=lam.opt)
return(list(coef=coef,lambda=lam.opt))
} 





#####  Cross-validation Trimming  #####
il0=indexi;cvm=list();cv.max=rep(NA, nlambdai)
repeat {
  numi=out$nzero[il0]
  Betai=sapply(outi, function(x){x$Beta[, il0]})
  Betao=apply(Betai!=0, 2, sum)
  numi2=min(max(Betao), numi)
  
  if (numi2>0) {
    cvPL=matrix(NA, nrow=nfolds, ncol=numi2)
    for (i in 1:nfolds) {
      Betaj=Betai[, i]
      numj=min(Betao[i], numi)
      if (numj==0) {
        cvPL[i, ]=cvtrimC(c(0.0, 0.0), numj, numi2, c(0, 0), prep0$x, prep0$N, prep0$nevent, prep0$nevent1, prep0$loc1, prep0$n, prepk[[i]]$x, prepk[[i]]$N, prepk[[i]]$nevent, prepk[[i]]$nevent1, prepk[[i]]$loc1, prepk[[i]]$n, 0, 1)
      } else {
        temo=rank(-abs(Betaj), ties.method="min")
        temo=data.frame(temo[which(temo<=numj)], which(temo<=numj))
        temo=temo[order(temo[, 1]), ]
        cvPL[i, ]=cvtrimC(Betaj[temo[, 2]], numj, numi2, temo[, 2]-1, prep0$x, prep0$N, prep0$nevent, prep0$nevent1, prep0$loc1, prep0$n, prepk[[i]]$x, prepk[[i]]$N, prepk[[i]]$nevent, prepk[[i]]$nevent1, prepk[[i]]$loc1, prepk[[i]]$n, 0, 1)
      }
    }
  } else {
    cvPL=matrix(NA, nrow=nfolds, ncol=1)
    for (i in 1:nfolds)
      cvPL[i, ]=cvtrimC(c(0.0, 0.0), 0, 0, c(0, 0), prep0$x, prep0$N, prep0$nevent, prep0$nevent1, prep0$loc1, prep0$n, prepk[[i]]$x, prepk[[i]]$N, prepk[[i]]$nevent, prepk[[i]]$nevent1, prepk[[i]]$loc1, prepk[[i]]$n, 0, 1)
  }
  
  cvraw=cvPL/weighti;nfoldi=apply(!is.na(cvraw), 2, sum);rm(cvPL) #
  cvm[[il0]]=apply(cvraw, 2, weighted.mean, w=weighti, na.rm=TRUE)
  cv.max[il0]=max(cvm[[il0]])
  il1=c(il0-1, il0+1)
  for (j in 1:2) {
    if (il1[j]>=1 & il1[j]<=nlambdai) {
      if (is.na(cv.max[il1[j]])) {
        numi=out$nzero[il1[j]]
        Betai=sapply(outi, function(x){x$Beta[, il1[j]]})
        Betao=apply(Betai!=0, 2, sum)
        numi2=min(max(Betao), numi)
        
        if (numi2>0) {
          cvPL=matrix(NA, nrow=nfolds, ncol=numi2)
          for (i in 1:nfolds ){
            Betaj=Betai[, i]
            numj=min(Betao[i], numi)
            if (numj==0) {
              cvPL[i, ]=cvtrimC(c(0.0, 0.0), numj, numi2, c(0, 0), prep0$x, prep0$N, prep0$nevent, prep0$nevent1, prep0$loc1, prep0$n, prepk[[i]]$x, prepk[[i]]$N, prepk[[i]]$nevent, prepk[[i]]$nevent1, prepk[[i]]$loc1, prepk[[i]]$n, 0, 1)
            } else {
              temo=rank(-abs(Betaj), ties.method="min")
              temo=data.frame(temo[which(temo<=numj)], which(temo<=numj))
              temo=temo[order(temo[, 1]), ]
              cvPL[i, ]=cvtrimC(Betaj[temo[, 2]], numj, numi2, temo[, 2]-1, prep0$x, prep0$N, prep0$nevent, prep0$nevent1, prep0$loc1, prep0$n, prepk[[i]]$x, prepk[[i]]$N, prepk[[i]]$nevent, prepk[[i]]$nevent1, prepk[[i]]$loc1, prepk[[i]]$n, 0, 1)
            }
          }
        } else {
          cvPL=matrix(NA, nrow=nfolds, ncol=1)
          for(i in 1:nfolds)
            cvPL[i, ]=cvtrimC(c(0.0, 0.0), 0, 0, c(0, 0), prep0$x, prep0$N, prep0$nevent, prep0$nevent1, prep0$loc1, prep0$n, prepk[[i]]$x, prepk[[i]]$N, prepk[[i]]$nevent, prepk[[i]]$nevent1, prepk[[i]]$loc1, prepk[[i]]$n, 0, 1)
        }
        cvraw=cvPL/weighti;nfoldi=apply(!is.na(cvraw), 2, sum)
        rm(cvPL)
        cvm[[il1[j]]]=apply(cvraw, 2, weighted.mean, w=weighti, na.rm=TRUE)
        cv.max[il1[j]]=max(cvm[[il1[j]]])
      }
    } else {
      break
    }
  }
  if (il1[j]==1 | il1[j]==nlambdai)
    break
  if (il0==which.max(cv.max)) {
    break
  } else {
    il0=which.max(cv.max)
  }
}
index0=which.max(cv.max)
