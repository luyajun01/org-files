
coxLasso <- function(x, y, nfolds, stdbeta=TRUE,foldid=NULL,nfolds=5,lambda=NULL,nlambda=50)
{
  foldid <- coxsplit(y,nfolds)
  #fit <- Coxnet(x, y ,penalty="Lasso", foldid=foldid, isd=stdbeta)
  #beta <- fit$Beta
  n = dim(z)[1]
  p = dim(z)[2]
  #if (is.null(foldid)) {
  #  foldid <-randomly_assign(n,nfolds)
  #}
  ##
  prep0=coxprep(z,y)
  wbeta=rep(1, p)
  rlambda=NULL
  N0=nrow(z)
  alpha=1
  ### Lambda path
  if (is.null(lambda)) {
    lambda_max=max_lambdaC(prep0$x, prep0$tevent, prep0$N, prep0$nevent, prep0$nevent1, prep0$loc1, prep0$n, alpha, wbeta, N0)
    lambda_min=ifelse(is.null(rlambda), ifelse(N0>p, lambda_max*0.0001, lambda_max*0.01), lambda_max*rlambda)
    lambda=lambda_max*(lambda_min/lambda_max)^(c(0:(nlambda-1))/(nlambda-1))
  } else {
    nlambda=length(lambda)
  }
  cv_model=list()
  auc<-matrix(NA,nr=nfolds,nc=nlambda)
  train_z=list()
  train_y=list()
  test_z=list()
  test_y=list()
  for (i in 1:nfolds) {
    train_z[[i]]<- z[foldid!=i,]
    train_y[[i]]<- y[foldid!=i,]
    test_z[[i]]<- z[foldid=i,]
    test_y[[i]]<- y[foldid=i,]
    cv_model[[i]]<-sapply(lambda,cox.lasso,y=train_y[[i]],z=train_z[[i]])
  }
  for(i in 1:nfolds) {
  for (j in 1:length(lambda)) {
  auc[i,j]<-UnoC(Surv(matrix(as.numeric(unlist(train_y[[i]])),nc=2)),Surv(matrix(as.numeric(unlist(test_y[[i]])),nc=2)),cv_model[[i]][,j]%*%test_z[[i]])
    }
  }
  